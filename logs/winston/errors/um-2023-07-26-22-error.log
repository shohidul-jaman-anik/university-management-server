{
  issues: [
    {
      received: 'Male',
      code: 'invalid_enum_value',
      options: [ 'male', 'female' ],
      path: [ 'body', 'student', 'gender' ],
      message: "Invalid enum value. Expected 'male' | 'female', received 'Male'"
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'ðŸ”´ globalErrorHandler ~ [\n' +
    '  {\n' +
    '    "received": "Male",\n' +
    '    "code": "invalid_enum_value",\n' +
    '    "options": [\n' +
    '      "male",\n' +
    '      "female"\n' +
    '    ],\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "student",\n' +
    '      "gender"\n' +
    '    ],\n' +
    `    "message": "Invalid enum value. Expected 'male' | 'female', received 'Male'"\n` +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "received": "Male",\n' +
    '    "code": "invalid_enum_value",\n' +
    '    "options": [\n' +
    '      "male",\n' +
    '      "female"\n' +
    '    ],\n' +
    '    "path": [\n' +
    '      "body",\n' +
    '      "student",\n' +
    '      "gender"\n' +
    '    ],\n' +
    `    "message": "Invalid enum value. Expected 'male' | 'female', received 'Male'"\n` +
    '  }\n' +
    ']\n' +
    '    at Object.get error [as error] (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\zod\\lib\\types.js:43:31)\n' +
    '    at ZodObject.parseAsync (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\zod\\lib\\types.js:164:22)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:35:27.459Z'
}
{
  level: 'error',
  message: `ðŸ”´ globalErrorHandler ~ Schema hasn't been registered for model "AcademicSemester".\n` +
    'Use mongoose.model(name, schema)',
  stack: `MissingSchemaError: Schema hasn't been registered for model "AcademicSemester".\n` +
    'Use mongoose.model(name, schema)\n' +
    '    at NativeConnection.Connection.model (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\connection.js:1287:13)\n' +
    '    at _getModelFromConn (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:580:15)\n' +
    '    at addModelNamesToMap (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:508:17)\n' +
    '    at getModelsMapForPopulate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:199:7)\n' +
    '    at populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4243:21)\n' +
    '    at _populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4203:5)\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4175:5\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at Function.populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4174:10)\n' +
    '    at model.Query._find (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\query.js:2294:20)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:35:45.426Z'
}
{
  index: 0,
  code: 11000,
  keyPattern: { email: 1 },
  keyValue: { email: 'john.doe@example.com' },
  level: 'error',
  message: 'ðŸ”´ globalErrorHandler ~ E11000 duplicate key error collection: university-management.students index: email_1 dup key: { email: "john.doe@example.com" }',
  stack: 'MongoServerError: E11000 duplicate key error collection: university-management.students index: email_1 dup key: { email: "john.doe@example.com" }\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\operations\\insert.ts:85:25\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts:574:11\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\sdam\\server.ts:368:13\n' +
    '    at handleOperationResult (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\sdam\\server.ts:502:14)\n' +
    '    at Connection.onMessage (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection.ts:418:5)\n' +
    '    at MessageStream.<anonymous> (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection.ts:243:56)\n' +
    '    at MessageStream.emit (node:events:527:28)\n' +
    '    at processIncomingData (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\message_stream.ts:187:12)\n' +
    '    at MessageStream._write (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\message_stream.ts:68:5)\n' +
    '    at writeOrBuffer (node:internal/streams/writable:389:12)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:42:03.593Z',
  [Symbol(errorLabels)]: Set(0) {}
}
{
  index: 0,
  code: 11000,
  keyPattern: { contactNo: 1 },
  keyValue: { contactNo: '1234567890' },
  level: 'error',
  message: 'ðŸ”´ globalErrorHandler ~ E11000 duplicate key error collection: university-management.students index: contactNo_1 dup key: { contactNo: "1234567890" }',
  stack: 'MongoServerError: E11000 duplicate key error collection: university-management.students index: contactNo_1 dup key: { contactNo: "1234567890" }\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\operations\\insert.ts:85:25\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts:574:11\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\sdam\\server.ts:368:13\n' +
    '    at handleOperationResult (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\sdam\\server.ts:502:14)\n' +
    '    at Connection.onMessage (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection.ts:418:5)\n' +
    '    at MessageStream.<anonymous> (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\connection.ts:243:56)\n' +
    '    at MessageStream.emit (node:events:527:28)\n' +
    '    at processIncomingData (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\message_stream.ts:187:12)\n' +
    '    at MessageStream._write (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongodb\\src\\cmap\\message_stream.ts:68:5)\n' +
    '    at writeOrBuffer (node:internal/streams/writable:389:12)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:43:50.145Z',
  [Symbol(errorLabels)]: Set(0) {}
}
{
  level: 'error',
  message: `ðŸ”´ globalErrorHandler ~ Schema hasn't been registered for model "AcademicSemester".\n` +
    'Use mongoose.model(name, schema)',
  stack: `MissingSchemaError: Schema hasn't been registered for model "AcademicSemester".\n` +
    'Use mongoose.model(name, schema)\n' +
    '    at NativeConnection.Connection.model (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\connection.js:1287:13)\n' +
    '    at _getModelFromConn (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:580:15)\n' +
    '    at addModelNamesToMap (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:508:17)\n' +
    '    at getModelsMapForPopulate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\helpers\\populate\\getModelsMapForPopulate.js:199:7)\n' +
    '    at populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4243:21)\n' +
    '    at _populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4203:5)\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4175:5\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at Function.populate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\model.js:4174:10)\n' +
    '    at model.Query._find (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\query.js:2294:20)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:44:04.569Z'
}
{
  errors: {
    id: ValidatorError: Path `id` is required.
        at validate (C:\Next Level Course\UniversityManagement\UniversityManagementServer\node_modules\mongoose\lib\schematype.js:1349:13)
        at SchemaString.SchemaType.doValidate (C:\Next Level Course\UniversityManagement\UniversityManagementServer\node_modules\mongoose\lib\schematype.js:1333:7)
        at C:\Next Level Course\UniversityManagement\UniversityManagementServer\node_modules\mongoose\lib\document.js:2932:18
        at processTicksAndRejections (node:internal/process/task_queues:78:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `id` is required.',
        type: 'required',
        path: 'id',
        value: undefined
      },
      kind: 'required',
      path: 'id',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Student validation failed',
  level: 'error',
  message: 'ðŸ”´ globalErrorHandler ~ Student validation failed: id: Path `id` is required.',
  stack: 'ValidationError: Student validation failed: id: Path `id` is required.\n' +
    '    at model.Document.invalidate (C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\document.js:3147:32)\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\document.js:2940:17\n' +
    '    at C:\\Next Level Course\\UniversityManagement\\UniversityManagementServer\\node_modules\\mongoose\\lib\\schematype.js:1352:9\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:78:11)',
  label: 'UMðŸ˜Š',
  timestamp: '2023-07-26T16:58:43.821Z'
}
